package com.degan.test;

import java.io.BufferedOutputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.concurrent.TimeUnit;

import org.openjdk.jmh.annotations.Benchmark;
import org.openjdk.jmh.annotations.BenchmarkMode;
import org.openjdk.jmh.annotations.Mode;
import org.openjdk.jmh.annotations.OutputTimeUnit;
import org.openjdk.jmh.annotations.Scope;
import org.openjdk.jmh.annotations.State;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.RunnerException;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;



@BenchmarkMode({ Mode.AverageTime })
@OutputTimeUnit(TimeUnit.MICROSECONDS)
@State(Scope.Thread)
public class DtaOutputStreamEx3 {
	
	@State(Scope.Benchmark)
	public static class Values {
	    volatile int[] score = {100, 90, 95, 85, 50};
	}
	
	public static void main(String[] args) throws RunnerException {
		Options opt = new OptionsBuilder()
                .include(DtaOutputStreamEx3.class.getSimpleName())
                .warmupIterations(5)
                .measurementIterations(5)
                .threads(4)
                .forks(1)
                .build();

        new Runner(opt).run();
//		usedSubStream();
//		usedStream();
//		usedBuffer();
		
	}
	@Benchmark
	public static void usedSubStream(Values state){
		
		try(FileOutputStream fos = new FileOutputStream("E:/score.dat");
				DataOutputStream dos = new DataOutputStream(fos)) {

			for(int i = 0; i<state.score.length; i++) {
				dos.writeInt(state.score[i]);
			}
			
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	
	@Benchmark
	public static void usedBuffer(Values state) {
		try(FileOutputStream fos = new FileOutputStream("E:/score2.dat");
				BufferedOutputStream obs = new BufferedOutputStream(fos,5)){
				
			for(int i = 0; i<state.score.length; i++) {
				obs.write(state.score[i]);
			}
				
			}catch(Exception e) { 
				e.printStackTrace();
			}
	}
	
	@Benchmark
	public static void usedStream(Values state){
		try(FileOutputStream fos = new FileOutputStream("E:/score3.dat")) {

			for(int i = 0; i<state.score.length; i++) {
				fos.write(state.score[i]);
			}
			
		}catch(IOException e){
			e.printStackTrace();
		}
	}
	
	
}
